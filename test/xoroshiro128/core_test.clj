(ns xoroshiro128.core-test
  (:require [clojure.test :refer :all]
            [criterium.core]
            [xoroshiro128.core :as x]))

(defn rand-long
  []
  (.nextLong (java.util.Random.)))

(deftest xoroshiro128-jump)
  ; Cross referencing https://github.com/mscharley/scala-xoroshiro128/issues/1
  ; (prn "***")
  ; (is (= 1339449404774774386 (x/value (x/splitmix64 90689400))))
  ; (is (= -818741996158402322 (x/value (x/splitmix64 -7046029253797442047))))
  ; (prn "***")
  ; (let [x (x/xoroshiro128+ 1234)]))
    ; (prn (x/jump x))))
;
; (deftest seed-extraction
;   ; We should be able to take a seed from any point in a sequence and seed a new
;   ; identical sequence that starts from the first point.
;   (let [gen-one (x/xoroshiro128+ (rand-long))
;         gen-one' (-> gen-one x/next x/next x/next)
;         a (.-a gen-one')
;         b (.-b gen-one')
;         gen-two (x/xoroshiro128+ a b)]
;     (is (=  (-> gen-two x/next x/value)
;             (-> gen-one' x/next x/value)))
;     (is (=  (-> gen-two x/next x/next x/value)
;             (-> gen-one' x/next x/next x/value)))))
;
(deftest splitmix64
  []
  (let [next-seed #(+ % -7046029254386353131)
        iterator #(map x/value (iterate x/next (x/splitmix64 %)))]
    ; Just outlining a list of known-good values.
    (is (= -2152535657050944081 (x/value (x/splitmix64 0))))
    (is (=  7960286522194355700
            (x/value (x/splitmix64 (next-seed 0)))
            (x/value (x/next (x/splitmix64 0)))))
    (is (= '(-2152535657050944081 7960286522194355700 487617019471545679 -537132696929009172 1961750202426094747 6038094601263162090 3207296026000306913 -4214222208109204676 4532161160992623299 -884877559730491226)
            (take 10 (iterator 0))))

    (is (= -7995527694508729151 (x/value (x/splitmix64 1))))
    (is (=  -4689498862643123097
            (x/value (x/splitmix64 (next-seed 1)))
            (x/value (x/next (x/splitmix64 1)))))
    (is (=  '(-7995527694508729151 -4689498862643123097 -534904783426661026 8196980753821780235 8195237237126968761 -4373826470845021568 -2262517385565684571 -8797857673641491083 5266705631892356520 -3800091893662914666)
            (take 10 (iterator 1))))

    (is (= -549842748227632346 (x/value (x/splitmix64 4693323816697189744))))
    (is (= 1984452702661322627 (x/value (xoroshiro128.core/splitmix64 5165464252035433577))))
    (is (= 8603550955848928026 (x/value (xoroshiro128.core/splitmix64 -3762096910555017800))))
    (is (= 2259666501077083692 (x/value (xoroshiro128.core/splitmix64 3265627685425294603))))

    ; References generated by https://ideone.com/PuauK5 using the C reference implementation.
    (is (= '( -1034691706609893923
              8680904332693978080
              612224539874700810
              1493023403444147697
              -4971950877442337366
              4658924989491456893
              -8241183556360570177
              3339891364704115287
              1891745321218875292
              7882050595557362670
              -9127375162604566388
              -3569741190262511653
              4346649363269677585
              1348791259155216957
              -3755241545019354078
              -8372197932075677063
              1005476421853585512
              4863487860399772318
              -8076540459081623095
              -5848806425627354111)
            (take 20 (iterator 8713631545574875647))))

    (is (= '( -4244452510388952855
              5956223441727670834
              -5213410896474884335
              -8606047647151789358
              -1962840546543243000
              4806123284274150721
              -452391144067255625
              -8128949576161005705
              -7766982720124747874
              2442572333995175370
              8795907375291054885
              -8300047804671076982
              -947267881210448127
              -5039450819200293977
              712308302981280290
              7522540599929537755
              6355174942928525052
              5978894557897017932
              1384107261312862605
              -919695367079934955)
            (take 20 (iterator -1652281797047415913))))

    (is (= '( 8087921443129252442
              855057127608676726
              -6259317645692393728
              8635608728090513967
              421061866719506586
              1877777419215953186
              4368703655494729211
              -1556609034609545752
              2341270030079493298
              -4138133028227527398
              -2247435238311012618
              -3224698691004407592
              2088590171456458876
              -1298671274262257903
              1782832499389687398
              1761783612743519830
              -7698279181887729364
              7145871122668955989
              6134502485225506850
              -4145396449423903700)
            (take 20 (iterator -8225000251231588461))))

    (is (= '( 2670967931508222055
              -3000391555947838935
              8699201354616398215
              4677786568774967471
              -4447483319296117254
              -1295230923362471383
              8295783462537564258
              2598289853101382717
              6806078238418048467
              -3643098847711341461
              850647228885797518
              4470415377057051519
              6061701817095049662
              -1125420228581506965
              -8343796135060713483
              -8709337688951741385
              -6473846124213406975
              4547348900786126390
              1842410324700671551
              -5605188000391847805)
            (take 20 (iterator 1208660907874351407))))

    (is (= '( -2485330961573533924
              2003845614284201340
              8537714462879617001
              475936958727069082
              -3649477943072457787
              6767009688717836876
              -101939472702990911
              -5839602631113212659
              -6522866584845456357
              -7197524940719392529
              3174802993620206951
              -8589839196322619404
              5020282923123977254
              -5832226764092013228
              1465530971980567248
              -8980745324321520516
              8794186555272603565
              2088909702140509611
              -5077844290574236237
              -9009488735979577267)
            (take 20 (iterator -7753703826340145833))))))
;
; (deftest xoroshiro128+
;   []
;   ; Passing one value should run through splitmix64.
;   (let [x (x/xoroshiro128+ 1)
;         y (x/xoroshiro128+ -4689498862643123097 -534904783426661026)]
;     (is (=  -5224403646069784123
;             (x/value x)
;             (x/value y))))
;
;   (let [x (x/xoroshiro128+ 0)
;         y (x/xoroshiro128+ 7960286522194355700 487617019471545679)]
;     (is (=  8447903541665901379
;             (x/value x)
;             (x/value y))))
;
;   ; Passing two values should pass through to the algorithm.
;   (let [x (x/xoroshiro128+ 0 1)]
;     (is (= 1 (x/value x)))
;     (is (= 68719493121 (x/value (x/next x))))
;     (is (= 38280734540038433 (x/value (x/next (x/next x))))))
;
;   (let [x (x/xoroshiro128+ 1 0)]
;     (is (= 1 (x/value x)))
;     (is (= 36028865738457089 (x/value (x/next x))))
;     (is (= 2322306399469857 (x/value (x/next (x/next x))))))
;
;   (let [x (x/xoroshiro128+ 1 1)]
;     (is (= 2 (x/value x)))
;     (is (= 36028797018963968 (x/value (x/next x))))
;     (is (= 36099165897359360 (x/value (x/next (x/next x))))))
;
;   (let [x (x/xoroshiro128+ -2288729261622650145 -6926512846790308433)]
;     (is (= -9215242108412958578 (x/value x)))
;     (is (= -7532115046694008527 (x/value (x/next x))))
;     (is (= 7536573313527036548 (x/value (x/next (x/next x))))))
;
;   (let [x (x/xoroshiro128+ 6229099873966726092 6043473223518792799)]
;     (is (= -6174170976224032725 (x/value x)))
;     (is (= -709792299180922954 (x/value (x/next x))))
;     (is (= -6877720052118061367 (x/value (x/next (x/next x)))))))
