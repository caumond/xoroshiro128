(ns xoroshiro128.core-test
 (:require
  xoroshiro128.long-int
  [clojure.test :refer [deftest is]]
  [criterium.core]
  [xoroshiro128.core :as x]))

; (deftest benchmark
;   (criterium.core/bench (rand-long))
;   (criterium.core/bench (x/rand)))

(deftest ??xoroshiro128+--args
 ; Check the signature of xoroshiro128+ all works as expected.
 ; 1x 64 bit.
 (let [seed64 (xoroshiro128.long-int/native-rand)
       x (x/xoroshiro128+ seed64)
       seed128 (x/seed64->seed128 seed64)]
  (is (= seed128 (x/seed x))))

 ; 2x 64 bit
 (let [a (xoroshiro128.long-int/native-rand)
       b (xoroshiro128.long-int/native-rand)
       x (x/xoroshiro128+ a b)]
  (is (= [a b] (x/seed x))))

 ; 1x 128 bit vector
 (let [seed128 [(xoroshiro128.long-int/native-rand)
                (xoroshiro128.long-int/native-rand)]
       x (x/xoroshiro128+ seed128)]
  (is (= seed128 (x/seed x))))

 ; 1x UUID
 (let [u (java.util.UUID/randomUUID)
       seed128 [(.getMostSignificantBits u) (.getLeastSignificantBits u)]
       x (x/xoroshiro128+ u)]
  (is (= seed128 (x/seed x)))))

(deftest x-rand
  (let [seed (xoroshiro128.long-int/native-rand)
        x (x/xoroshiro128+ seed)
        j (x/jump x)
        j' (x/jump j)]
    ; Check that we can seed rand properly.
    (x/seed-rand! seed)
    (is (= (x/rand) (x/value x)))
    (is (= (x/rand) (x/value (x/next x))))
    (is (= (x/rand) (x/value (x/next (x/next x)))))
    (x/seed-rand! seed)
    (is (= (x/rand) (x/value x)))
    (is (= (x/rand) (x/value (x/next x))))
    (is (= (x/rand) (x/value (x/next (x/next x)))))
    ; Check that we can jump rand properly.
    (x/seed-rand! seed)
    (x/jump-rand!)
    (is (= (x/rand) (x/value j)))
    (x/seed-rand! seed)
    (x/jump-rand!)
    (x/jump-rand!)
    (is (= (x/rand) (x/value j')))))

(deftest ??xoroshiro128-jump
  ; References generated by https://ideone.com/PuauK5 using the C reference implementation.
  (let [x (x/xoroshiro128+ 3610677051444252520 -111600565950788475)
        j1 (x/jump x)
        j2 (x/jump (x/next j1))
        j3 (x/jump (x/next j2))
        j4 (x/jump (x/next j3))
        j5 (x/jump (x/next j4))]
    (is (= 1380011959502460548 (x/value j1)))
    (is (= -8039967115997247744 (x/value j2)))
    (is (= 4226878875002605666 (x/value j3)))
    (is (= -7260350153901218819 (x/value j4)))
    (is (= 1922911174585345600 (x/value j5))))

  (let [x (x/xoroshiro128+ 990903846483086990 -9148032195894284410)
        j1 (x/jump x)
        j2 (x/jump (x/next j1))
        j3 (x/jump (x/next j2))
        j4 (x/jump (x/next j3))
        j5 (x/jump (x/next j4))]
    (is (= -202913253275002842 (x/value j1)))
    (is (= -3343919899937856555 (x/value j2)))
    (is (= 7815278568507025494 (x/value j3)))
    (is (= -7622830828298576044 (x/value j4)))
    (is (= 2861384012317217776 (x/value j5))))

  (let [x (x/xoroshiro128+ -4009791646934021264 2482945807292523774)
        j1 (x/jump x)
        j2 (x/jump (x/next j1))
        j3 (x/jump (x/next j2))
        j4 (x/jump (x/next j3))
        j5 (x/jump (x/next j4))]
    (is (= 6862507382354034559 (x/value j1)))
    (is (= 7011875142185683248 (x/value j2)))
    (is (= -4496564143832921207 (x/value j3)))
    (is (= 1853506959186203582 (x/value j4)))
    (is (= -8638081920607530712 (x/value j5))))

  (let [x (x/xoroshiro128+ 8408836858555572576 -8576334934951868580)
        j1 (x/jump x)
        j2 (x/jump (x/next j1))
        j3 (x/jump (x/next j2))
        j4 (x/jump (x/next j3))
        j5 (x/jump (x/next j4))]
    (is (= -2331108112525860358 (x/value j1)))
    (is (= -7058988001537110731 (x/value j2)))
    (is (= -6592145494078489880 (x/value j3)))
    (is (= -1634515623999943417 (x/value j4)))
    (is (= 3097860178046766537 (x/value j5))))

  (let [x (x/xoroshiro128+ 1865665657046312887 -2081931776983017860)
        j1 (x/jump x)
        j2 (x/jump (x/next j1))
        j3 (x/jump (x/next j2))
        j4 (x/jump (x/next j3))
        j5 (x/jump (x/next j4))]
    (is (= 6193425956360965668 (x/value j1)))
    (is (= -5684898831560071200 (x/value j2)))
    (is (= -2065913535431491189 (x/value j3)))
    (is (= 9075337997212788543 (x/value j4)))
    (is (= -5025025827370910366 (x/value j5))))

  (let [x (x/xoroshiro128+ 4716662714674336978 -4755215357118135582)
        j1 (x/jump x)
        j2 (x/jump (x/next j1))
        j3 (x/jump (x/next j2))
        j4 (x/jump (x/next j3))
        j5 (x/jump (x/next j4))]
    (is (= 9063123224574765832 (x/value j1)))
    (is (= -8444699141156829399 (x/value j2)))
    (is (= -908412126696469887 (x/value j3)))
    (is (= 5890875775521162114 (x/value j4)))
    (is (= -3787313022067243265 (x/value j5)))))

(deftest ??seed-extraction
  ; We should be able to take a seed from any point in a sequence and seed a new
  ; identical sequence that starts from the first point.
  ; Xoroshiro128+
  (let [gen-one (x/xoroshiro128+ (xoroshiro128.long-int/native-rand))
        gen-one' (-> gen-one x/next x/next x/next)
        a (first (x/seed gen-one'))
        b (second (x/seed gen-one'))
        gen-two (x/xoroshiro128+ a b)]
    (is (=  (-> gen-two x/next x/value)
            (-> gen-one' x/next x/value)))
    (is (=  (-> gen-two x/next x/next x/value)
            (-> gen-one' x/next x/next x/value)))))

(deftest xoroshiro128+
  []
  ; Passing one value should run through splitmix64.
  (let [x (x/xoroshiro128+ 1)
        y (x/xoroshiro128+ -4689498862643123097 -534904783426661026)]
    (is (=  -5224403646069784123
            (x/value x)
            (x/value y))))

  (let [x (x/xoroshiro128+ 0)
        y (x/xoroshiro128+ 7960286522194355700 487617019471545679)]
    (is (=  8447903541665901379
            (x/value x)
            (x/value y))))

  ; Passing two values should pass through to the algorithm.
  (let [x (x/xoroshiro128+ 0 1)]
    (is (= 1 (x/value x)))
    (is (= 68719493121 (x/value (x/next x))))
    (is (= 38280734540038433 (x/value (x/next (x/next x))))))

  (let [x (x/xoroshiro128+ 1 0)]
    (is (= 1 (x/value x)))
    (is (= 36028865738457089 (x/value (x/next x))))
    (is (= 2322306399469857 (x/value (x/next (x/next x))))))

  (let [x (x/xoroshiro128+ 1 1)]
    (is (= 2 (x/value x)))
    (is (= 36028797018963968 (x/value (x/next x))))
    (is (= 36099165897359360 (x/value (x/next (x/next x))))))

  (let [x (x/xoroshiro128+ -2288729261622650145 -6926512846790308433)]
    (is (= -9215242108412958578 (x/value x)))
    (is (= -7532115046694008527 (x/value (x/next x))))
    (is (= 7536573313527036548 (x/value (x/next (x/next x))))))

  (let [x (x/xoroshiro128+ 6229099873966726092 6043473223518792799)]
    (is (= -6174170976224032725 (x/value x)))
    (is (= -709792299180922954 (x/value (x/next x))))
    (is (= -6877720052118061367 (x/value (x/next (x/next x))))))

  ; References generated by https://ideone.com/PuauK5 using the C reference implementation.
  (let [iterator (fn [a b] (map x/value (iterate x/next (x/xoroshiro128+ a b))))]
    (is (=  '(5915700289933183508
              -1558954363250675631
              1539657768162236093
              -8431081888899236472
              4074320157442668224
              -8533182883670957849
              -1526802202569055637
              4850584859890061851
              8634885833871017437
              951158310114151668
              -4036337231569826939
              8611270869943596899
              7018510003645386554
              -6795935637186553108
              -4624131008753776202
              372564000562090156
              6859481897331970453
              -538149764789634741
              1466816894539304563
              -3606614033023745357)
            (take 20 (iterator -5272350857503343987 -7258692926273024121)))))

  (let [iterator (fn [a b] (map x/value (iterate x/next (x/xoroshiro128+ a b))))]
    (is (=  '(-8578920952240901094
              -6487534394338226528
              2764200532191932311
              5335387613884335740
              1839948030858925012
              -7973224912611020956
              2551562045061459880
              -5525989048507934678
              4229265504746057216
              -4069894182678871317
              -7553564479743607123
              8111898360903549442
              4725246142996591409
              8782331531474316592
              -295811702305402749
              -2380515216488501046
              4460300165800464164
              7712752344217628412
              456423108839055359
              -5643491909635081635)
            (take 20 (iterator -8225400499032730153 -353520453208170941)))))

  (let [iterator (fn [a b] (map x/value (iterate x/next (x/xoroshiro128+ a b))))]
    (is (=  '(-2714170201264899768
              -1407769210302857770
              -8870355780905176385
              7651281371634664910
              -1851793852725403807
              5398593226664916035
              -2499710751108373161
              3790334130960207628
              -4549407293332968031
              -3494298676208843722
              5073366846343845174
              9164225786785933557
              -6236557002069440799
              1848516810561049622
              -4937631416431947741
              6539669931865202127
              4408145272191338804
              6921764645921579858
              -8733157623936083508
              -8100575772512211386)
            (take 20 (iterator -4662309351488326550 1948139150223426782)))))

  (let [iterator (fn [a b] (map x/value (iterate x/next (x/xoroshiro128+ a b))))]
    (is (=  '(-4121496229006008560
              -3383723555119512146
              -1933504188657904426
              -7466416979647767106
              -5727051145790414991
              1833256616643247313
              -5201551263828128579
              538678157558092550
              -3342913672601878355
              -1136443397401111913
              -5730963972448837499
              970469368782993999
              3193470605279722807
              -2044684518233872490
              -4321572028526598124
              -8503075182810095327
              -506552873591169430
              -6449026570454392506
              -6847437900125755298
              -760090062958374858)
            (take 20 (iterator -5279509386902751759 1158013157896743199)))))

  (let [iterator (fn [a b] (map x/value (iterate x/next (x/xoroshiro128+ a b))))]
    (is (=  '(-3706720492587120323
              5534242416345417728
              -362310399193671027
              450793391533003795
              -7979320742418194277
              7222408043579796109
              -5412584949384491544
              -8172053099165754120
              -9017917230352423104
              3172883245738333508
              -1361123297417885575
              1987544378930201407
              -3543879845457455972
              -7302607744029067661
              -2159218809787252040
              -193332270841612227
              8441597738709619586
              -4576302444254675749
              -9152651193963047247
              -76386203971839276)
            (take 20 (iterator -3963057978039743073 256337485452622750))))))
